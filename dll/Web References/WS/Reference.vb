'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CMOXROperationCompleted As System.Threading.SendOrPostCallback
        
        Private CMOXUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MAOPMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MAUSUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CONTAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MTUSUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CTUROOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IANTPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IIMTUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IICTUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IMROLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICFUNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IMESLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICLICOperationCompleted As System.Threading.SendOrPostCallback
        
        Private INLI3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICOLIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CTUSMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CINLIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICOL2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICOL4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ICERWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.slbaperbDll.My.MySettings.Default.slbaperbDll_WS_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CMOXRCompleted As CMOXRCompletedEventHandler
        
        '''<remarks/>
        Public Event CMOXUCompleted As CMOXUCompletedEventHandler
        
        '''<remarks/>
        Public Event MAOPMCompleted As MAOPMCompletedEventHandler
        
        '''<remarks/>
        Public Event MAUSUCompleted As MAUSUCompletedEventHandler
        
        '''<remarks/>
        Public Event CONTACompleted As CONTACompletedEventHandler
        
        '''<remarks/>
        Public Event MTUSUCompleted As MTUSUCompletedEventHandler
        
        '''<remarks/>
        Public Event CTUROCompleted As CTUROCompletedEventHandler
        
        '''<remarks/>
        Public Event IANTPCompleted As IANTPCompletedEventHandler
        
        '''<remarks/>
        Public Event IIMTUCompleted As IIMTUCompletedEventHandler
        
        '''<remarks/>
        Public Event IICTUCompleted As IICTUCompletedEventHandler
        
        '''<remarks/>
        Public Event IMROLCompleted As IMROLCompletedEventHandler
        
        '''<remarks/>
        Public Event ICFUNCompleted As ICFUNCompletedEventHandler
        
        '''<remarks/>
        Public Event IMESLCompleted As IMESLCompletedEventHandler
        
        '''<remarks/>
        Public Event ICLICCompleted As ICLICCompletedEventHandler
        
        '''<remarks/>
        Public Event INLI3Completed As INLI3CompletedEventHandler
        
        '''<remarks/>
        Public Event ICOLICompleted As ICOLICompletedEventHandler
        
        '''<remarks/>
        Public Event CTUSMCompleted As CTUSMCompletedEventHandler
        
        '''<remarks/>
        Public Event CINLICompleted As CINLICompletedEventHandler
        
        '''<remarks/>
        Public Event ICOL2Completed As ICOL2CompletedEventHandler
        
        '''<remarks/>
        Public Event ICOL4Completed As ICOL4CompletedEventHandler
        
        '''<remarks/>
        Public Event ICERWCompleted As ICERWCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CMOXR", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CMOXR(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODROL_B As String, ByVal CODSIS As String) As String
            Dim results() As Object = Me.Invoke("CMOXR", New Object() {ORQ, CODOPC_B, CODROL_B, CODSIS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CMOXRAsync(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODROL_B As String, ByVal CODSIS As String)
            Me.CMOXRAsync(ORQ, CODOPC_B, CODROL_B, CODSIS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CMOXRAsync(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODROL_B As String, ByVal CODSIS As String, ByVal userState As Object)
            If (Me.CMOXROperationCompleted Is Nothing) Then
                Me.CMOXROperationCompleted = AddressOf Me.OnCMOXROperationCompleted
            End If
            Me.InvokeAsync("CMOXR", New Object() {ORQ, CODOPC_B, CODROL_B, CODSIS}, Me.CMOXROperationCompleted, userState)
        End Sub
        
        Private Sub OnCMOXROperationCompleted(ByVal arg As Object)
            If (Not (Me.CMOXRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CMOXRCompleted(Me, New CMOXRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CMOXU", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CMOXU(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODUSU As String, ByVal ROL As String, ByVal CODSIS As String) As String
            Dim results() As Object = Me.Invoke("CMOXU", New Object() {ORQ, CODOPC_B, CODUSU, ROL, CODSIS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CMOXUAsync(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODUSU As String, ByVal ROL As String, ByVal CODSIS As String)
            Me.CMOXUAsync(ORQ, CODOPC_B, CODUSU, ROL, CODSIS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CMOXUAsync(ByVal ORQ As String, ByVal CODOPC_B As String, ByVal CODUSU As String, ByVal ROL As String, ByVal CODSIS As String, ByVal userState As Object)
            If (Me.CMOXUOperationCompleted Is Nothing) Then
                Me.CMOXUOperationCompleted = AddressOf Me.OnCMOXUOperationCompleted
            End If
            Me.InvokeAsync("CMOXU", New Object() {ORQ, CODOPC_B, CODUSU, ROL, CODSIS}, Me.CMOXUOperationCompleted, userState)
        End Sub
        
        Private Sub OnCMOXUOperationCompleted(ByVal arg As Object)
            If (Not (Me.CMOXUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CMOXUCompleted(Me, New CMOXUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MAOPM", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MAOPM(ByVal ACCESO1 As String, ByVal ACCESO2 As String, ByVal ACCESO3 As String, ByVal ACCESO4 As String, ByVal CODUSU As String, ByVal MANT As String, ByVal OPCION1 As String, ByVal OPCION2 As String, ByVal OPCION3 As String, ByVal OPCION4 As String, ByVal OPCIONB As String, ByVal SISTEMA As String) As String
            Dim results() As Object = Me.Invoke("MAOPM", New Object() {ACCESO1, ACCESO2, ACCESO3, ACCESO4, CODUSU, MANT, OPCION1, OPCION2, OPCION3, OPCION4, OPCIONB, SISTEMA})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MAOPMAsync(ByVal ACCESO1 As String, ByVal ACCESO2 As String, ByVal ACCESO3 As String, ByVal ACCESO4 As String, ByVal CODUSU As String, ByVal MANT As String, ByVal OPCION1 As String, ByVal OPCION2 As String, ByVal OPCION3 As String, ByVal OPCION4 As String, ByVal OPCIONB As String, ByVal SISTEMA As String)
            Me.MAOPMAsync(ACCESO1, ACCESO2, ACCESO3, ACCESO4, CODUSU, MANT, OPCION1, OPCION2, OPCION3, OPCION4, OPCIONB, SISTEMA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MAOPMAsync(ByVal ACCESO1 As String, ByVal ACCESO2 As String, ByVal ACCESO3 As String, ByVal ACCESO4 As String, ByVal CODUSU As String, ByVal MANT As String, ByVal OPCION1 As String, ByVal OPCION2 As String, ByVal OPCION3 As String, ByVal OPCION4 As String, ByVal OPCIONB As String, ByVal SISTEMA As String, ByVal userState As Object)
            If (Me.MAOPMOperationCompleted Is Nothing) Then
                Me.MAOPMOperationCompleted = AddressOf Me.OnMAOPMOperationCompleted
            End If
            Me.InvokeAsync("MAOPM", New Object() {ACCESO1, ACCESO2, ACCESO3, ACCESO4, CODUSU, MANT, OPCION1, OPCION2, OPCION3, OPCION4, OPCIONB, SISTEMA}, Me.MAOPMOperationCompleted, userState)
        End Sub
        
        Private Sub OnMAOPMOperationCompleted(ByVal arg As Object)
            If (Not (Me.MAOPMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MAOPMCompleted(Me, New MAOPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MAUSU", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MAUSU(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal CORREO As String, ByVal ESTADO As String, ByVal FECPASS As String, ByVal INICIALES As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal PASS As String, ByVal RUT As String, ByVal CODSIS As String, ByVal UNIDAD As String) As String
            Dim results() As Object = Me.Invoke("MAUSU", New Object() {APEMAT, APEPAT, CODUSU, CORREO, ESTADO, FECPASS, INICIALES, MANT, NOMBRES, PASS, RUT, CODSIS, UNIDAD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MAUSUAsync(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal CORREO As String, ByVal ESTADO As String, ByVal FECPASS As String, ByVal INICIALES As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal PASS As String, ByVal RUT As String, ByVal CODSIS As String, ByVal UNIDAD As String)
            Me.MAUSUAsync(APEMAT, APEPAT, CODUSU, CORREO, ESTADO, FECPASS, INICIALES, MANT, NOMBRES, PASS, RUT, CODSIS, UNIDAD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MAUSUAsync(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal CORREO As String, ByVal ESTADO As String, ByVal FECPASS As String, ByVal INICIALES As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal PASS As String, ByVal RUT As String, ByVal CODSIS As String, ByVal UNIDAD As String, ByVal userState As Object)
            If (Me.MAUSUOperationCompleted Is Nothing) Then
                Me.MAUSUOperationCompleted = AddressOf Me.OnMAUSUOperationCompleted
            End If
            Me.InvokeAsync("MAUSU", New Object() {APEMAT, APEPAT, CODUSU, CORREO, ESTADO, FECPASS, INICIALES, MANT, NOMBRES, PASS, RUT, CODSIS, UNIDAD}, Me.MAUSUOperationCompleted, userState)
        End Sub
        
        Private Sub OnMAUSUOperationCompleted(ByVal arg As Object)
            If (Not (Me.MAUSUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MAUSUCompleted(Me, New MAUSUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CONTA", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CONTA(ByVal ORQ As String, ByVal TIPORDEN As String, ByVal TIPREG_B As String, ByVal ALFA01_B As String, ByVal ALFA02_B As String, ByVal CODIGO_B As String, ByVal DESCRI_B As String) As String
            Dim results() As Object = Me.Invoke("CONTA", New Object() {ORQ, TIPORDEN, TIPREG_B, ALFA01_B, ALFA02_B, CODIGO_B, DESCRI_B})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CONTAAsync(ByVal ORQ As String, ByVal TIPORDEN As String, ByVal TIPREG_B As String, ByVal ALFA01_B As String, ByVal ALFA02_B As String, ByVal CODIGO_B As String, ByVal DESCRI_B As String)
            Me.CONTAAsync(ORQ, TIPORDEN, TIPREG_B, ALFA01_B, ALFA02_B, CODIGO_B, DESCRI_B, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CONTAAsync(ByVal ORQ As String, ByVal TIPORDEN As String, ByVal TIPREG_B As String, ByVal ALFA01_B As String, ByVal ALFA02_B As String, ByVal CODIGO_B As String, ByVal DESCRI_B As String, ByVal userState As Object)
            If (Me.CONTAOperationCompleted Is Nothing) Then
                Me.CONTAOperationCompleted = AddressOf Me.OnCONTAOperationCompleted
            End If
            Me.InvokeAsync("CONTA", New Object() {ORQ, TIPORDEN, TIPREG_B, ALFA01_B, ALFA02_B, CODIGO_B, DESCRI_B}, Me.CONTAOperationCompleted, userState)
        End Sub
        
        Private Sub OnCONTAOperationCompleted(ByVal arg As Object)
            If (Not (Me.CONTACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CONTACompleted(Me, New CONTACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MTUSU", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MTUSU(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal OPCION As String, ByVal PASSCONFIR As String, ByVal PASSNEW As String, ByVal PASSWORD As String) As String
            Dim results() As Object = Me.Invoke("MTUSU", New Object() {APEMAT, APEPAT, CODUSU, MANT, NOMBRES, OPCION, PASSCONFIR, PASSNEW, PASSWORD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MTUSUAsync(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal OPCION As String, ByVal PASSCONFIR As String, ByVal PASSNEW As String, ByVal PASSWORD As String)
            Me.MTUSUAsync(APEMAT, APEPAT, CODUSU, MANT, NOMBRES, OPCION, PASSCONFIR, PASSNEW, PASSWORD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MTUSUAsync(ByVal APEMAT As String, ByVal APEPAT As String, ByVal CODUSU As String, ByVal MANT As String, ByVal NOMBRES As String, ByVal OPCION As String, ByVal PASSCONFIR As String, ByVal PASSNEW As String, ByVal PASSWORD As String, ByVal userState As Object)
            If (Me.MTUSUOperationCompleted Is Nothing) Then
                Me.MTUSUOperationCompleted = AddressOf Me.OnMTUSUOperationCompleted
            End If
            Me.InvokeAsync("MTUSU", New Object() {APEMAT, APEPAT, CODUSU, MANT, NOMBRES, OPCION, PASSCONFIR, PASSNEW, PASSWORD}, Me.MTUSUOperationCompleted, userState)
        End Sub
        
        Private Sub OnMTUSUOperationCompleted(ByVal arg As Object)
            If (Not (Me.MTUSUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MTUSUCompleted(Me, New MTUSUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CTURO", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CTURO(ByVal ORQ As String, ByVal CODOPC_C As String, ByVal CODROL_C As String, ByVal CODSIS_C As String, ByVal CODUSU_C As String) As String
            Dim results() As Object = Me.Invoke("CTURO", New Object() {ORQ, CODOPC_C, CODROL_C, CODSIS_C, CODUSU_C})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CTUROAsync(ByVal ORQ As String, ByVal CODOPC_C As String, ByVal CODROL_C As String, ByVal CODSIS_C As String, ByVal CODUSU_C As String)
            Me.CTUROAsync(ORQ, CODOPC_C, CODROL_C, CODSIS_C, CODUSU_C, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CTUROAsync(ByVal ORQ As String, ByVal CODOPC_C As String, ByVal CODROL_C As String, ByVal CODSIS_C As String, ByVal CODUSU_C As String, ByVal userState As Object)
            If (Me.CTUROOperationCompleted Is Nothing) Then
                Me.CTUROOperationCompleted = AddressOf Me.OnCTUROOperationCompleted
            End If
            Me.InvokeAsync("CTURO", New Object() {ORQ, CODOPC_C, CODROL_C, CODSIS_C, CODUSU_C}, Me.CTUROOperationCompleted, userState)
        End Sub
        
        Private Sub OnCTUROOperationCompleted(ByVal arg As Object)
            If (Not (Me.CTUROCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CTUROCompleted(Me, New CTUROCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IANTP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IANTP( _
                    ByVal USUARIO As String,  _
                    ByVal TELEFO_FUN As String,  _
                    ByVal COMUNA_FUN As String,  _
                    ByVal ACLARA_FUN As String,  _
                    ByVal NCALLE_FUN As String,  _
                    ByVal CALLE_FUN As String,  _
                    ByVal MAIL_PER As String,  _
                    ByVal NOMBRE_CON As String,  _
                    ByVal TELEFO_CON As String,  _
                    ByVal ACTIVO As String,  _
                    ByVal MEDPAG As String,  _
                    ByVal CTACTE As String,  _
                    ByVal CODBANCO As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String) As String
            Dim results() As Object = Me.Invoke("IANTP", New Object() {USUARIO, TELEFO_FUN, COMUNA_FUN, ACLARA_FUN, NCALLE_FUN, CALLE_FUN, MAIL_PER, NOMBRE_CON, TELEFO_CON, ACTIVO, MEDPAG, CTACTE, CODBANCO, RUTFUN, VAMENU, MANT})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IANTPAsync( _
                    ByVal USUARIO As String,  _
                    ByVal TELEFO_FUN As String,  _
                    ByVal COMUNA_FUN As String,  _
                    ByVal ACLARA_FUN As String,  _
                    ByVal NCALLE_FUN As String,  _
                    ByVal CALLE_FUN As String,  _
                    ByVal MAIL_PER As String,  _
                    ByVal NOMBRE_CON As String,  _
                    ByVal TELEFO_CON As String,  _
                    ByVal ACTIVO As String,  _
                    ByVal MEDPAG As String,  _
                    ByVal CTACTE As String,  _
                    ByVal CODBANCO As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String)
            Me.IANTPAsync(USUARIO, TELEFO_FUN, COMUNA_FUN, ACLARA_FUN, NCALLE_FUN, CALLE_FUN, MAIL_PER, NOMBRE_CON, TELEFO_CON, ACTIVO, MEDPAG, CTACTE, CODBANCO, RUTFUN, VAMENU, MANT, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IANTPAsync( _
                    ByVal USUARIO As String,  _
                    ByVal TELEFO_FUN As String,  _
                    ByVal COMUNA_FUN As String,  _
                    ByVal ACLARA_FUN As String,  _
                    ByVal NCALLE_FUN As String,  _
                    ByVal CALLE_FUN As String,  _
                    ByVal MAIL_PER As String,  _
                    ByVal NOMBRE_CON As String,  _
                    ByVal TELEFO_CON As String,  _
                    ByVal ACTIVO As String,  _
                    ByVal MEDPAG As String,  _
                    ByVal CTACTE As String,  _
                    ByVal CODBANCO As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String,  _
                    ByVal userState As Object)
            If (Me.IANTPOperationCompleted Is Nothing) Then
                Me.IANTPOperationCompleted = AddressOf Me.OnIANTPOperationCompleted
            End If
            Me.InvokeAsync("IANTP", New Object() {USUARIO, TELEFO_FUN, COMUNA_FUN, ACLARA_FUN, NCALLE_FUN, CALLE_FUN, MAIL_PER, NOMBRE_CON, TELEFO_CON, ACTIVO, MEDPAG, CTACTE, CODBANCO, RUTFUN, VAMENU, MANT}, Me.IANTPOperationCompleted, userState)
        End Sub
        
        Private Sub OnIANTPOperationCompleted(ByVal arg As Object)
            If (Not (Me.IANTPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IANTPCompleted(Me, New IANTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IIMTU", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IIMTU(ByVal PRIORIDAD As String, ByVal EMAIL As String, ByVal CODUSU As String, ByVal OPCION As String, ByVal MANT As String, ByVal PASSMAIL As String) As String
            Dim results() As Object = Me.Invoke("IIMTU", New Object() {PRIORIDAD, EMAIL, CODUSU, OPCION, MANT, PASSMAIL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IIMTUAsync(ByVal PRIORIDAD As String, ByVal EMAIL As String, ByVal CODUSU As String, ByVal OPCION As String, ByVal MANT As String, ByVal PASSMAIL As String)
            Me.IIMTUAsync(PRIORIDAD, EMAIL, CODUSU, OPCION, MANT, PASSMAIL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IIMTUAsync(ByVal PRIORIDAD As String, ByVal EMAIL As String, ByVal CODUSU As String, ByVal OPCION As String, ByVal MANT As String, ByVal PASSMAIL As String, ByVal userState As Object)
            If (Me.IIMTUOperationCompleted Is Nothing) Then
                Me.IIMTUOperationCompleted = AddressOf Me.OnIIMTUOperationCompleted
            End If
            Me.InvokeAsync("IIMTU", New Object() {PRIORIDAD, EMAIL, CODUSU, OPCION, MANT, PASSMAIL}, Me.IIMTUOperationCompleted, userState)
        End Sub
        
        Private Sub OnIIMTUOperationCompleted(ByVal arg As Object)
            If (Not (Me.IIMTUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IIMTUCompleted(Me, New IIMTUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IICTU", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IICTU(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String) As String
            Dim results() As Object = Me.Invoke("IICTU", New Object() {ORQ, PRIORIDA_B, CODUSU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IICTUAsync(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String)
            Me.IICTUAsync(ORQ, PRIORIDA_B, CODUSU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IICTUAsync(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String, ByVal userState As Object)
            If (Me.IICTUOperationCompleted Is Nothing) Then
                Me.IICTUOperationCompleted = AddressOf Me.OnIICTUOperationCompleted
            End If
            Me.InvokeAsync("IICTU", New Object() {ORQ, PRIORIDA_B, CODUSU}, Me.IICTUOperationCompleted, userState)
        End Sub
        
        Private Sub OnIICTUOperationCompleted(ByVal arg As Object)
            If (Not (Me.IICTUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IICTUCompleted(Me, New IICTUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMROL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IMROL(ByVal ORQ As String, ByVal CODOPCB As String, ByVal CODUSU As String, ByVal CODROL As String, ByVal CODSIS As String, ByVal MANT As String, ByVal PERMISO As String) As String
            Dim results() As Object = Me.Invoke("IMROL", New Object() {ORQ, CODOPCB, CODUSU, CODROL, CODSIS, MANT, PERMISO})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IMROLAsync(ByVal ORQ As String, ByVal CODOPCB As String, ByVal CODUSU As String, ByVal CODROL As String, ByVal CODSIS As String, ByVal MANT As String, ByVal PERMISO As String)
            Me.IMROLAsync(ORQ, CODOPCB, CODUSU, CODROL, CODSIS, MANT, PERMISO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IMROLAsync(ByVal ORQ As String, ByVal CODOPCB As String, ByVal CODUSU As String, ByVal CODROL As String, ByVal CODSIS As String, ByVal MANT As String, ByVal PERMISO As String, ByVal userState As Object)
            If (Me.IMROLOperationCompleted Is Nothing) Then
                Me.IMROLOperationCompleted = AddressOf Me.OnIMROLOperationCompleted
            End If
            Me.InvokeAsync("IMROL", New Object() {ORQ, CODOPCB, CODUSU, CODROL, CODSIS, MANT, PERMISO}, Me.IMROLOperationCompleted, userState)
        End Sub
        
        Private Sub OnIMROLOperationCompleted(ByVal arg As Object)
            If (Not (Me.IMROLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IMROLCompleted(Me, New IMROLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICFUN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICFUN(ByVal RUTFUN As String) As String
            Dim results() As Object = Me.Invoke("ICFUN", New Object() {RUTFUN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICFUNAsync(ByVal RUTFUN As String)
            Me.ICFUNAsync(RUTFUN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICFUNAsync(ByVal RUTFUN As String, ByVal userState As Object)
            If (Me.ICFUNOperationCompleted Is Nothing) Then
                Me.ICFUNOperationCompleted = AddressOf Me.OnICFUNOperationCompleted
            End If
            Me.InvokeAsync("ICFUN", New Object() {RUTFUN}, Me.ICFUNOperationCompleted, userState)
        End Sub
        
        Private Sub OnICFUNOperationCompleted(ByVal arg As Object)
            If (Not (Me.ICFUNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICFUNCompleted(Me, New ICFUNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMESL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IMESL(ByVal ORQ As String, ByVal INST As String, ByVal ANO As String, ByVal RUTFUN As String, ByVal ANOINI As String) As String
            Dim results() As Object = Me.Invoke("IMESL", New Object() {ORQ, INST, ANO, RUTFUN, ANOINI})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IMESLAsync(ByVal ORQ As String, ByVal INST As String, ByVal ANO As String, ByVal RUTFUN As String, ByVal ANOINI As String)
            Me.IMESLAsync(ORQ, INST, ANO, RUTFUN, ANOINI, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IMESLAsync(ByVal ORQ As String, ByVal INST As String, ByVal ANO As String, ByVal RUTFUN As String, ByVal ANOINI As String, ByVal userState As Object)
            If (Me.IMESLOperationCompleted Is Nothing) Then
                Me.IMESLOperationCompleted = AddressOf Me.OnIMESLOperationCompleted
            End If
            Me.InvokeAsync("IMESL", New Object() {ORQ, INST, ANO, RUTFUN, ANOINI}, Me.IMESLOperationCompleted, userState)
        End Sub
        
        Private Sub OnIMESLOperationCompleted(ByVal arg As Object)
            If (Not (Me.IMESLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IMESLCompleted(Me, New IMESLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICLIC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICLIC(ByVal ORQ As String, ByVal FECINI As String, ByVal RUTFUN As String, ByVal VAMENU As String) As String
            Dim results() As Object = Me.Invoke("ICLIC", New Object() {ORQ, FECINI, RUTFUN, VAMENU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICLICAsync(ByVal ORQ As String, ByVal FECINI As String, ByVal RUTFUN As String, ByVal VAMENU As String)
            Me.ICLICAsync(ORQ, FECINI, RUTFUN, VAMENU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICLICAsync(ByVal ORQ As String, ByVal FECINI As String, ByVal RUTFUN As String, ByVal VAMENU As String, ByVal userState As Object)
            If (Me.ICLICOperationCompleted Is Nothing) Then
                Me.ICLICOperationCompleted = AddressOf Me.OnICLICOperationCompleted
            End If
            Me.InvokeAsync("ICLIC", New Object() {ORQ, FECINI, RUTFUN, VAMENU}, Me.ICLICOperationCompleted, userState)
        End Sub
        
        Private Sub OnICLICOperationCompleted(ByVal arg As Object)
            If (Not (Me.ICLICCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICLICCompleted(Me, New ICLICCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INLI3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function INLI3( _
                    ByVal VALPROMCOT As String,  _
                    ByVal VALPROMLIQ As String,  _
                    ByVal VALRECIBIR As String,  _
                    ByVal VALSUBSID As String,  _
                    ByVal VALCOTIZA As String,  _
                    ByVal ANO_AVISO As String,  _
                    ByVal CODUSU As String,  _
                    ByVal NUM_AVISO As String,  _
                    ByVal CODAREA As String,  _
                    ByVal FECANTECED As String,  _
                    ByVal FEC_AVISO As String,  _
                    ByVal FECANT_LIC As String,  _
                    ByVal TIPLIC As String,  _
                    ByVal ESTLIC As String,  _
                    ByVal FECRECLIC As String,  _
                    ByVal FECTER_CON As String,  _
                    ByVal FECINI_CON As String,  _
                    ByVal PRI_AMP As String,  _
                    ByVal OBSER2 As String,  _
                    ByVal OBSER1 As String,  _
                    ByVal PERREMUN As String,  _
                    ByVal VALREMB As String,  _
                    ByVal OBSERV_LIC As String,  _
                    ByVal ESPECI As String,  _
                    ByVal DIAGNO_LIC As String,  _
                    ByVal FECRESL As String,  _
                    ByVal CODDIAG As String,  _
                    ByVal TIPSUB As String,  _
                    ByVal CODEST As String,  _
                    ByVal ACLARAM As String,  _
                    ByVal CORRELA As String,  _
                    ByVal RESSSAL As String,  _
                    ByVal SERVSAL As String,  _
                    ByVal COMUNAM As String,  _
                    ByVal NUMEROM As String,  _
                    ByVal CALLEM As String,  _
                    ByVal RUTHIJ As String,  _
                    ByVal RUTMED As String,  _
                    ByVal APEMATM As String,  _
                    ByVal FONOMED As String,  _
                    ByVal APEPATM As String,  _
                    ByVal NOMMED_LIC As String,  _
                    ByVal MESCON As String,  _
                    ByVal FECNAC As String,  _
                    ByVal FECACC_LIC As String,  _
                    ByVal NRODIA_LIC As String,  _
                    ByVal NUMLIC_DV As String,  _
                    ByVal NUMLIC_LIC As String,  _
                    ByVal TIPMED As String,  _
                    ByVal ACLARA_LIC As String,  _
                    ByVal FONO_LIC As String,  _
                    ByVal COMUNA_LIC As String,  _
                    ByVal NCALLE_LIC As String,  _
                    ByVal CALLE_LIC As String,  _
                    ByVal CODOCU As String,  _
                    ByVal ACTLAB As String,  _
                    ByVal CODJORNADA As String,  _
                    ByVal CODLICEN As String,  _
                    ByVal FECEMI As String,  _
                    ByVal FECINI_LIC As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VACLICF As String,  _
                    ByVal VASILIC As String,  _
                    ByVal VAANLIC As String,  _
                    ByVal VAULLIC As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String) As String
            Dim results() As Object = Me.Invoke("INLI3", New Object() {VALPROMCOT, VALPROMLIQ, VALRECIBIR, VALSUBSID, VALCOTIZA, ANO_AVISO, CODUSU, NUM_AVISO, CODAREA, FECANTECED, FEC_AVISO, FECANT_LIC, TIPLIC, ESTLIC, FECRECLIC, FECTER_CON, FECINI_CON, PRI_AMP, OBSER2, OBSER1, PERREMUN, VALREMB, OBSERV_LIC, ESPECI, DIAGNO_LIC, FECRESL, CODDIAG, TIPSUB, CODEST, ACLARAM, CORRELA, RESSSAL, SERVSAL, COMUNAM, NUMEROM, CALLEM, RUTHIJ, RUTMED, APEMATM, FONOMED, APEPATM, NOMMED_LIC, MESCON, FECNAC, FECACC_LIC, NRODIA_LIC, NUMLIC_DV, NUMLIC_LIC, TIPMED, ACLARA_LIC, FONO_LIC, COMUNA_LIC, NCALLE_LIC, CALLE_LIC, CODOCU, ACTLAB, CODJORNADA, CODLICEN, FECEMI, FECINI_LIC, RUTFUN, VACLICF, VASILIC, VAANLIC, VAULLIC, VAMENU, MANT})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub INLI3Async( _
                    ByVal VALPROMCOT As String,  _
                    ByVal VALPROMLIQ As String,  _
                    ByVal VALRECIBIR As String,  _
                    ByVal VALSUBSID As String,  _
                    ByVal VALCOTIZA As String,  _
                    ByVal ANO_AVISO As String,  _
                    ByVal CODUSU As String,  _
                    ByVal NUM_AVISO As String,  _
                    ByVal CODAREA As String,  _
                    ByVal FECANTECED As String,  _
                    ByVal FEC_AVISO As String,  _
                    ByVal FECANT_LIC As String,  _
                    ByVal TIPLIC As String,  _
                    ByVal ESTLIC As String,  _
                    ByVal FECRECLIC As String,  _
                    ByVal FECTER_CON As String,  _
                    ByVal FECINI_CON As String,  _
                    ByVal PRI_AMP As String,  _
                    ByVal OBSER2 As String,  _
                    ByVal OBSER1 As String,  _
                    ByVal PERREMUN As String,  _
                    ByVal VALREMB As String,  _
                    ByVal OBSERV_LIC As String,  _
                    ByVal ESPECI As String,  _
                    ByVal DIAGNO_LIC As String,  _
                    ByVal FECRESL As String,  _
                    ByVal CODDIAG As String,  _
                    ByVal TIPSUB As String,  _
                    ByVal CODEST As String,  _
                    ByVal ACLARAM As String,  _
                    ByVal CORRELA As String,  _
                    ByVal RESSSAL As String,  _
                    ByVal SERVSAL As String,  _
                    ByVal COMUNAM As String,  _
                    ByVal NUMEROM As String,  _
                    ByVal CALLEM As String,  _
                    ByVal RUTHIJ As String,  _
                    ByVal RUTMED As String,  _
                    ByVal APEMATM As String,  _
                    ByVal FONOMED As String,  _
                    ByVal APEPATM As String,  _
                    ByVal NOMMED_LIC As String,  _
                    ByVal MESCON As String,  _
                    ByVal FECNAC As String,  _
                    ByVal FECACC_LIC As String,  _
                    ByVal NRODIA_LIC As String,  _
                    ByVal NUMLIC_DV As String,  _
                    ByVal NUMLIC_LIC As String,  _
                    ByVal TIPMED As String,  _
                    ByVal ACLARA_LIC As String,  _
                    ByVal FONO_LIC As String,  _
                    ByVal COMUNA_LIC As String,  _
                    ByVal NCALLE_LIC As String,  _
                    ByVal CALLE_LIC As String,  _
                    ByVal CODOCU As String,  _
                    ByVal ACTLAB As String,  _
                    ByVal CODJORNADA As String,  _
                    ByVal CODLICEN As String,  _
                    ByVal FECEMI As String,  _
                    ByVal FECINI_LIC As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VACLICF As String,  _
                    ByVal VASILIC As String,  _
                    ByVal VAANLIC As String,  _
                    ByVal VAULLIC As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String)
            Me.INLI3Async(VALPROMCOT, VALPROMLIQ, VALRECIBIR, VALSUBSID, VALCOTIZA, ANO_AVISO, CODUSU, NUM_AVISO, CODAREA, FECANTECED, FEC_AVISO, FECANT_LIC, TIPLIC, ESTLIC, FECRECLIC, FECTER_CON, FECINI_CON, PRI_AMP, OBSER2, OBSER1, PERREMUN, VALREMB, OBSERV_LIC, ESPECI, DIAGNO_LIC, FECRESL, CODDIAG, TIPSUB, CODEST, ACLARAM, CORRELA, RESSSAL, SERVSAL, COMUNAM, NUMEROM, CALLEM, RUTHIJ, RUTMED, APEMATM, FONOMED, APEPATM, NOMMED_LIC, MESCON, FECNAC, FECACC_LIC, NRODIA_LIC, NUMLIC_DV, NUMLIC_LIC, TIPMED, ACLARA_LIC, FONO_LIC, COMUNA_LIC, NCALLE_LIC, CALLE_LIC, CODOCU, ACTLAB, CODJORNADA, CODLICEN, FECEMI, FECINI_LIC, RUTFUN, VACLICF, VASILIC, VAANLIC, VAULLIC, VAMENU, MANT, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub INLI3Async( _
                    ByVal VALPROMCOT As String,  _
                    ByVal VALPROMLIQ As String,  _
                    ByVal VALRECIBIR As String,  _
                    ByVal VALSUBSID As String,  _
                    ByVal VALCOTIZA As String,  _
                    ByVal ANO_AVISO As String,  _
                    ByVal CODUSU As String,  _
                    ByVal NUM_AVISO As String,  _
                    ByVal CODAREA As String,  _
                    ByVal FECANTECED As String,  _
                    ByVal FEC_AVISO As String,  _
                    ByVal FECANT_LIC As String,  _
                    ByVal TIPLIC As String,  _
                    ByVal ESTLIC As String,  _
                    ByVal FECRECLIC As String,  _
                    ByVal FECTER_CON As String,  _
                    ByVal FECINI_CON As String,  _
                    ByVal PRI_AMP As String,  _
                    ByVal OBSER2 As String,  _
                    ByVal OBSER1 As String,  _
                    ByVal PERREMUN As String,  _
                    ByVal VALREMB As String,  _
                    ByVal OBSERV_LIC As String,  _
                    ByVal ESPECI As String,  _
                    ByVal DIAGNO_LIC As String,  _
                    ByVal FECRESL As String,  _
                    ByVal CODDIAG As String,  _
                    ByVal TIPSUB As String,  _
                    ByVal CODEST As String,  _
                    ByVal ACLARAM As String,  _
                    ByVal CORRELA As String,  _
                    ByVal RESSSAL As String,  _
                    ByVal SERVSAL As String,  _
                    ByVal COMUNAM As String,  _
                    ByVal NUMEROM As String,  _
                    ByVal CALLEM As String,  _
                    ByVal RUTHIJ As String,  _
                    ByVal RUTMED As String,  _
                    ByVal APEMATM As String,  _
                    ByVal FONOMED As String,  _
                    ByVal APEPATM As String,  _
                    ByVal NOMMED_LIC As String,  _
                    ByVal MESCON As String,  _
                    ByVal FECNAC As String,  _
                    ByVal FECACC_LIC As String,  _
                    ByVal NRODIA_LIC As String,  _
                    ByVal NUMLIC_DV As String,  _
                    ByVal NUMLIC_LIC As String,  _
                    ByVal TIPMED As String,  _
                    ByVal ACLARA_LIC As String,  _
                    ByVal FONO_LIC As String,  _
                    ByVal COMUNA_LIC As String,  _
                    ByVal NCALLE_LIC As String,  _
                    ByVal CALLE_LIC As String,  _
                    ByVal CODOCU As String,  _
                    ByVal ACTLAB As String,  _
                    ByVal CODJORNADA As String,  _
                    ByVal CODLICEN As String,  _
                    ByVal FECEMI As String,  _
                    ByVal FECINI_LIC As String,  _
                    ByVal RUTFUN As String,  _
                    ByVal VACLICF As String,  _
                    ByVal VASILIC As String,  _
                    ByVal VAANLIC As String,  _
                    ByVal VAULLIC As String,  _
                    ByVal VAMENU As String,  _
                    ByVal MANT As String,  _
                    ByVal userState As Object)
            If (Me.INLI3OperationCompleted Is Nothing) Then
                Me.INLI3OperationCompleted = AddressOf Me.OnINLI3OperationCompleted
            End If
            Me.InvokeAsync("INLI3", New Object() {VALPROMCOT, VALPROMLIQ, VALRECIBIR, VALSUBSID, VALCOTIZA, ANO_AVISO, CODUSU, NUM_AVISO, CODAREA, FECANTECED, FEC_AVISO, FECANT_LIC, TIPLIC, ESTLIC, FECRECLIC, FECTER_CON, FECINI_CON, PRI_AMP, OBSER2, OBSER1, PERREMUN, VALREMB, OBSERV_LIC, ESPECI, DIAGNO_LIC, FECRESL, CODDIAG, TIPSUB, CODEST, ACLARAM, CORRELA, RESSSAL, SERVSAL, COMUNAM, NUMEROM, CALLEM, RUTHIJ, RUTMED, APEMATM, FONOMED, APEPATM, NOMMED_LIC, MESCON, FECNAC, FECACC_LIC, NRODIA_LIC, NUMLIC_DV, NUMLIC_LIC, TIPMED, ACLARA_LIC, FONO_LIC, COMUNA_LIC, NCALLE_LIC, CALLE_LIC, CODOCU, ACTLAB, CODJORNADA, CODLICEN, FECEMI, FECINI_LIC, RUTFUN, VACLICF, VASILIC, VAANLIC, VAULLIC, VAMENU, MANT}, Me.INLI3OperationCompleted, userState)
        End Sub
        
        Private Sub OnINLI3OperationCompleted(ByVal arg As Object)
            If (Not (Me.INLI3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent INLI3Completed(Me, New INLI3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICOLI", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICOLI(ByVal ORQ As String, ByVal ANO As String, ByVal COD_D As String, ByVal COD_B As String, ByVal COD_H As String, ByVal DIA_TRABAJ As String, ByVal INST As String, ByVal MES As String, ByVal RUTFUN As String, ByVal TIPFUN As String, ByVal TIPO As String, ByVal TIPOLIQ As String) As String
            Dim results() As Object = Me.Invoke("ICOLI", New Object() {ORQ, ANO, COD_D, COD_B, COD_H, DIA_TRABAJ, INST, MES, RUTFUN, TIPFUN, TIPO, TIPOLIQ})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICOLIAsync(ByVal ORQ As String, ByVal ANO As String, ByVal COD_D As String, ByVal COD_B As String, ByVal COD_H As String, ByVal DIA_TRABAJ As String, ByVal INST As String, ByVal MES As String, ByVal RUTFUN As String, ByVal TIPFUN As String, ByVal TIPO As String, ByVal TIPOLIQ As String)
            Me.ICOLIAsync(ORQ, ANO, COD_D, COD_B, COD_H, DIA_TRABAJ, INST, MES, RUTFUN, TIPFUN, TIPO, TIPOLIQ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICOLIAsync(ByVal ORQ As String, ByVal ANO As String, ByVal COD_D As String, ByVal COD_B As String, ByVal COD_H As String, ByVal DIA_TRABAJ As String, ByVal INST As String, ByVal MES As String, ByVal RUTFUN As String, ByVal TIPFUN As String, ByVal TIPO As String, ByVal TIPOLIQ As String, ByVal userState As Object)
            If (Me.ICOLIOperationCompleted Is Nothing) Then
                Me.ICOLIOperationCompleted = AddressOf Me.OnICOLIOperationCompleted
            End If
            Me.InvokeAsync("ICOLI", New Object() {ORQ, ANO, COD_D, COD_B, COD_H, DIA_TRABAJ, INST, MES, RUTFUN, TIPFUN, TIPO, TIPOLIQ}, Me.ICOLIOperationCompleted, userState)
        End Sub
        
        Private Sub OnICOLIOperationCompleted(ByVal arg As Object)
            If (Not (Me.ICOLICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICOLICompleted(Me, New ICOLICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CTUSM", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CTUSM(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String) As String
            Dim results() As Object = Me.Invoke("CTUSM", New Object() {ORQ, PRIORIDA_B, CODUSU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CTUSMAsync(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String)
            Me.CTUSMAsync(ORQ, PRIORIDA_B, CODUSU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CTUSMAsync(ByVal ORQ As String, ByVal PRIORIDA_B As String, ByVal CODUSU As String, ByVal userState As Object)
            If (Me.CTUSMOperationCompleted Is Nothing) Then
                Me.CTUSMOperationCompleted = AddressOf Me.OnCTUSMOperationCompleted
            End If
            Me.InvokeAsync("CTUSM", New Object() {ORQ, PRIORIDA_B, CODUSU}, Me.CTUSMOperationCompleted, userState)
        End Sub
        
        Private Sub OnCTUSMOperationCompleted(ByVal arg As Object)
            If (Not (Me.CTUSMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CTUSMCompleted(Me, New CTUSMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CINLI", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CINLI(ByVal ORQ As String, ByVal INDMAT As String, ByVal NUMSEC As String, ByVal MONTO As String, ByVal FECENV As String, ByVal FECING As String, ByVal NUMLIC As String, ByVal FECLIC As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal VAMENU As String, ByVal MAINT As String) As String
            Dim results() As Object = Me.Invoke("CINLI", New Object() {ORQ, INDMAT, NUMSEC, MONTO, FECENV, FECING, NUMLIC, FECLIC, TIPFUN, RUTFUN, VAMENU, MAINT})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CINLIAsync(ByVal ORQ As String, ByVal INDMAT As String, ByVal NUMSEC As String, ByVal MONTO As String, ByVal FECENV As String, ByVal FECING As String, ByVal NUMLIC As String, ByVal FECLIC As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal VAMENU As String, ByVal MAINT As String)
            Me.CINLIAsync(ORQ, INDMAT, NUMSEC, MONTO, FECENV, FECING, NUMLIC, FECLIC, TIPFUN, RUTFUN, VAMENU, MAINT, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CINLIAsync(ByVal ORQ As String, ByVal INDMAT As String, ByVal NUMSEC As String, ByVal MONTO As String, ByVal FECENV As String, ByVal FECING As String, ByVal NUMLIC As String, ByVal FECLIC As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal VAMENU As String, ByVal MAINT As String, ByVal userState As Object)
            If (Me.CINLIOperationCompleted Is Nothing) Then
                Me.CINLIOperationCompleted = AddressOf Me.OnCINLIOperationCompleted
            End If
            Me.InvokeAsync("CINLI", New Object() {ORQ, INDMAT, NUMSEC, MONTO, FECENV, FECING, NUMLIC, FECLIC, TIPFUN, RUTFUN, VAMENU, MAINT}, Me.CINLIOperationCompleted, userState)
        End Sub
        
        Private Sub OnCINLIOperationCompleted(ByVal arg As Object)
            If (Not (Me.CINLICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CINLICompleted(Me, New CINLICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICOL2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICOL2(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String) As String
            Dim results() As Object = Me.Invoke("ICOL2", New Object() {ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICOL2Async(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String)
            Me.ICOL2Async(ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICOL2Async(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String, ByVal userState As Object)
            If (Me.ICOL2OperationCompleted Is Nothing) Then
                Me.ICOL2OperationCompleted = AddressOf Me.OnICOL2OperationCompleted
            End If
            Me.InvokeAsync("ICOL2", New Object() {ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU}, Me.ICOL2OperationCompleted, userState)
        End Sub
        
        Private Sub OnICOL2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ICOL2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICOL2Completed(Me, New ICOL2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICOL4", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICOL4(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String) As String
            Dim results() As Object = Me.Invoke("ICOL4", New Object() {ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICOL4Async(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String)
            Me.ICOL4Async(ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICOL4Async(ByVal ORQ As String, ByVal TIPO As String, ByVal NUMBAS As String, ByVal TIPBAS As String, ByVal TIPFUN As String, ByVal RUTFUN As String, ByVal PROCESO As String, ByVal MES As String, ByVal ANO As String, ByVal INST As String, ByVal VAMENU As String, ByVal userState As Object)
            If (Me.ICOL4OperationCompleted Is Nothing) Then
                Me.ICOL4OperationCompleted = AddressOf Me.OnICOL4OperationCompleted
            End If
            Me.InvokeAsync("ICOL4", New Object() {ORQ, TIPO, NUMBAS, TIPBAS, TIPFUN, RUTFUN, PROCESO, MES, ANO, INST, VAMENU}, Me.ICOL4OperationCompleted, userState)
        End Sub
        
        Private Sub OnICOL4OperationCompleted(ByVal arg As Object)
            If (Not (Me.ICOL4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICOL4Completed(Me, New ICOL4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICERW", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ICERW( _
                    ByVal ORQ As String,  _
                    ByVal CARGOJEFE As String,  _
                    ByVal NUMCERT As String,  _
                    ByVal NOMBREJEF As String,  _
                    ByVal CARGOFUN As String,  _
                    ByVal MESREM As String,  _
                    ByVal ANOREM As String,  _
                    ByVal SEXO As String,  _
                    ByVal APEMATFUN As String,  _
                    ByVal APEPATFUN As String,  _
                    ByVal NOMBREFUN As String,  _
                    ByVal ANO_C As String,  _
                    ByVal SECMOV_C As String,  _
                    ByVal SECUN_C As String,  _
                    ByVal RUTFUN_C As String,  _
                    ByVal TIPOCER_C As String,  _
                    ByVal MANT As String,  _
                    ByVal VARIOS_P As String,  _
                    ByVal CODAREA_P As String,  _
                    ByVal ESTA_P As String,  _
                    ByVal TCONTRA_P As String,  _
                    ByVal TIPOCON_P As String,  _
                    ByVal TIPPAGO_P As String,  _
                    ByVal CCOSTO_P As String,  _
                    ByVal FTERCON_P As String,  _
                    ByVal FINICON_P As String,  _
                    ByVal SEC_MOV_P As String,  _
                    ByVal SEC_CON_P As String,  _
                    ByVal GCCOSTO_P As String,  _
                    ByVal TIPOFUN_P As String,  _
                    ByVal FINGCORP As String,  _
                    ByVal FINGSER As String,  _
                    ByVal NUMBIE As String,  _
                    ByVal VARIOS As String,  _
                    ByVal CENTROCOST As String,  _
                    ByVal TIPOFUN As String,  _
                    ByVal TIPO_PAGO As String,  _
                    ByVal TCONTRA As String,  _
                    ByVal ESTA As String,  _
                    ByVal TIPOCON As String,  _
                    ByVal FECTERCON As String,  _
                    ByVal FECINICON As String) As String
            Dim results() As Object = Me.Invoke("ICERW", New Object() {ORQ, CARGOJEFE, NUMCERT, NOMBREJEF, CARGOFUN, MESREM, ANOREM, SEXO, APEMATFUN, APEPATFUN, NOMBREFUN, ANO_C, SECMOV_C, SECUN_C, RUTFUN_C, TIPOCER_C, MANT, VARIOS_P, CODAREA_P, ESTA_P, TCONTRA_P, TIPOCON_P, TIPPAGO_P, CCOSTO_P, FTERCON_P, FINICON_P, SEC_MOV_P, SEC_CON_P, GCCOSTO_P, TIPOFUN_P, FINGCORP, FINGSER, NUMBIE, VARIOS, CENTROCOST, TIPOFUN, TIPO_PAGO, TCONTRA, ESTA, TIPOCON, FECTERCON, FECINICON})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ICERWAsync( _
                    ByVal ORQ As String,  _
                    ByVal CARGOJEFE As String,  _
                    ByVal NUMCERT As String,  _
                    ByVal NOMBREJEF As String,  _
                    ByVal CARGOFUN As String,  _
                    ByVal MESREM As String,  _
                    ByVal ANOREM As String,  _
                    ByVal SEXO As String,  _
                    ByVal APEMATFUN As String,  _
                    ByVal APEPATFUN As String,  _
                    ByVal NOMBREFUN As String,  _
                    ByVal ANO_C As String,  _
                    ByVal SECMOV_C As String,  _
                    ByVal SECUN_C As String,  _
                    ByVal RUTFUN_C As String,  _
                    ByVal TIPOCER_C As String,  _
                    ByVal MANT As String,  _
                    ByVal VARIOS_P As String,  _
                    ByVal CODAREA_P As String,  _
                    ByVal ESTA_P As String,  _
                    ByVal TCONTRA_P As String,  _
                    ByVal TIPOCON_P As String,  _
                    ByVal TIPPAGO_P As String,  _
                    ByVal CCOSTO_P As String,  _
                    ByVal FTERCON_P As String,  _
                    ByVal FINICON_P As String,  _
                    ByVal SEC_MOV_P As String,  _
                    ByVal SEC_CON_P As String,  _
                    ByVal GCCOSTO_P As String,  _
                    ByVal TIPOFUN_P As String,  _
                    ByVal FINGCORP As String,  _
                    ByVal FINGSER As String,  _
                    ByVal NUMBIE As String,  _
                    ByVal VARIOS As String,  _
                    ByVal CENTROCOST As String,  _
                    ByVal TIPOFUN As String,  _
                    ByVal TIPO_PAGO As String,  _
                    ByVal TCONTRA As String,  _
                    ByVal ESTA As String,  _
                    ByVal TIPOCON As String,  _
                    ByVal FECTERCON As String,  _
                    ByVal FECINICON As String)
            Me.ICERWAsync(ORQ, CARGOJEFE, NUMCERT, NOMBREJEF, CARGOFUN, MESREM, ANOREM, SEXO, APEMATFUN, APEPATFUN, NOMBREFUN, ANO_C, SECMOV_C, SECUN_C, RUTFUN_C, TIPOCER_C, MANT, VARIOS_P, CODAREA_P, ESTA_P, TCONTRA_P, TIPOCON_P, TIPPAGO_P, CCOSTO_P, FTERCON_P, FINICON_P, SEC_MOV_P, SEC_CON_P, GCCOSTO_P, TIPOFUN_P, FINGCORP, FINGSER, NUMBIE, VARIOS, CENTROCOST, TIPOFUN, TIPO_PAGO, TCONTRA, ESTA, TIPOCON, FECTERCON, FECINICON, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ICERWAsync( _
                    ByVal ORQ As String,  _
                    ByVal CARGOJEFE As String,  _
                    ByVal NUMCERT As String,  _
                    ByVal NOMBREJEF As String,  _
                    ByVal CARGOFUN As String,  _
                    ByVal MESREM As String,  _
                    ByVal ANOREM As String,  _
                    ByVal SEXO As String,  _
                    ByVal APEMATFUN As String,  _
                    ByVal APEPATFUN As String,  _
                    ByVal NOMBREFUN As String,  _
                    ByVal ANO_C As String,  _
                    ByVal SECMOV_C As String,  _
                    ByVal SECUN_C As String,  _
                    ByVal RUTFUN_C As String,  _
                    ByVal TIPOCER_C As String,  _
                    ByVal MANT As String,  _
                    ByVal VARIOS_P As String,  _
                    ByVal CODAREA_P As String,  _
                    ByVal ESTA_P As String,  _
                    ByVal TCONTRA_P As String,  _
                    ByVal TIPOCON_P As String,  _
                    ByVal TIPPAGO_P As String,  _
                    ByVal CCOSTO_P As String,  _
                    ByVal FTERCON_P As String,  _
                    ByVal FINICON_P As String,  _
                    ByVal SEC_MOV_P As String,  _
                    ByVal SEC_CON_P As String,  _
                    ByVal GCCOSTO_P As String,  _
                    ByVal TIPOFUN_P As String,  _
                    ByVal FINGCORP As String,  _
                    ByVal FINGSER As String,  _
                    ByVal NUMBIE As String,  _
                    ByVal VARIOS As String,  _
                    ByVal CENTROCOST As String,  _
                    ByVal TIPOFUN As String,  _
                    ByVal TIPO_PAGO As String,  _
                    ByVal TCONTRA As String,  _
                    ByVal ESTA As String,  _
                    ByVal TIPOCON As String,  _
                    ByVal FECTERCON As String,  _
                    ByVal FECINICON As String,  _
                    ByVal userState As Object)
            If (Me.ICERWOperationCompleted Is Nothing) Then
                Me.ICERWOperationCompleted = AddressOf Me.OnICERWOperationCompleted
            End If
            Me.InvokeAsync("ICERW", New Object() {ORQ, CARGOJEFE, NUMCERT, NOMBREJEF, CARGOFUN, MESREM, ANOREM, SEXO, APEMATFUN, APEPATFUN, NOMBREFUN, ANO_C, SECMOV_C, SECUN_C, RUTFUN_C, TIPOCER_C, MANT, VARIOS_P, CODAREA_P, ESTA_P, TCONTRA_P, TIPOCON_P, TIPPAGO_P, CCOSTO_P, FTERCON_P, FINICON_P, SEC_MOV_P, SEC_CON_P, GCCOSTO_P, TIPOFUN_P, FINGCORP, FINGSER, NUMBIE, VARIOS, CENTROCOST, TIPOFUN, TIPO_PAGO, TCONTRA, ESTA, TIPOCON, FECTERCON, FECINICON}, Me.ICERWOperationCompleted, userState)
        End Sub
        
        Private Sub OnICERWOperationCompleted(ByVal arg As Object)
            If (Not (Me.ICERWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ICERWCompleted(Me, New ICERWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CMOXRCompletedEventHandler(ByVal sender As Object, ByVal e As CMOXRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CMOXRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CMOXUCompletedEventHandler(ByVal sender As Object, ByVal e As CMOXUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CMOXUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub MAOPMCompletedEventHandler(ByVal sender As Object, ByVal e As MAOPMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MAOPMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub MAUSUCompletedEventHandler(ByVal sender As Object, ByVal e As MAUSUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MAUSUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CONTACompletedEventHandler(ByVal sender As Object, ByVal e As CONTACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CONTACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub MTUSUCompletedEventHandler(ByVal sender As Object, ByVal e As MTUSUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MTUSUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CTUROCompletedEventHandler(ByVal sender As Object, ByVal e As CTUROCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CTUROCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub IANTPCompletedEventHandler(ByVal sender As Object, ByVal e As IANTPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IANTPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub IIMTUCompletedEventHandler(ByVal sender As Object, ByVal e As IIMTUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IIMTUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub IICTUCompletedEventHandler(ByVal sender As Object, ByVal e As IICTUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IICTUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub IMROLCompletedEventHandler(ByVal sender As Object, ByVal e As IMROLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IMROLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICFUNCompletedEventHandler(ByVal sender As Object, ByVal e As ICFUNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICFUNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub IMESLCompletedEventHandler(ByVal sender As Object, ByVal e As IMESLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IMESLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICLICCompletedEventHandler(ByVal sender As Object, ByVal e As ICLICCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICLICCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub INLI3CompletedEventHandler(ByVal sender As Object, ByVal e As INLI3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class INLI3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICOLICompletedEventHandler(ByVal sender As Object, ByVal e As ICOLICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICOLICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CTUSMCompletedEventHandler(ByVal sender As Object, ByVal e As CTUSMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CTUSMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub CINLICompletedEventHandler(ByVal sender As Object, ByVal e As CINLICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CINLICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICOL2CompletedEventHandler(ByVal sender As Object, ByVal e As ICOL2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICOL2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICOL4CompletedEventHandler(ByVal sender As Object, ByVal e As ICOL4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICOL4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ICERWCompletedEventHandler(ByVal sender As Object, ByVal e As ICERWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ICERWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
